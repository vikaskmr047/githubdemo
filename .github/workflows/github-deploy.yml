name: 'Terraform'


permissions:
  id-token: write
  contents: read

on: 
   push:
     branches: 
     - feature
   pull_request:

  
jobs:
  terrform:
    name: 'Terraform'
   

    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRETt: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    runs-on: ubuntu-latest
    environment: dev

    defaults:
      run:
        shell: bash
       

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Check terraform version
        run: |
         az --version
         terraform version
    
      - name: Authenticate using a Service Principal
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: 'Terraform Format'   
        id: fmt
        run: terraform fmt
        continue-on-error: true

      - name: 'Terraform init'
        run: terraform init
        id: init
        

      - name: 'Terraform validate'
        id: validate
        run: terraform validate
        

      - name: 'Terraform plan'
        id: plan
        run: terraform plan
        continue-on-error: false

      - name: Terraform apply
        id: apply
        run: |
         terraform apply -auto-approve || echo "apply_failed=true" >> "$GITHUB_OUTPUT"
         echo "The output of apply block is $GITHUB_OUTPUT"
         
      
      - name: Check for Existing Resource
        id: check_existing_resource
        run: echo "resource_exists= $(grep -q 'A resource with the ID' ${{github.workspace}}/terraform.log && echo true || echo false)" >> "$GITHUB_OUTPUT"

      - name: Handle apply failure
        if: steps.apply.outputs.apply_failed =='true' && steps.check_existing_resource.outputs.resource_exists == 'true'
        run: echo "Resource already exists hence exiting"
        
      
      - name: Handle apply success
        if: steps.apply.outputs.apply_failed == 'false'
        run: echo "Apply successful"

    





      # - name: Terraform apply
      #   id: apply
      #   run: terraform apply -auto-approve || echo "::set-output name=apply_failed::true"


      # - name: Check for Existing Resource
      #   id: check_existing_resource
      #   run: echo "::set-output name=resource_exists::$(grep -q 'A resource with the ID' ${{github.workspace}}/terraform.log && echo true || echo false)"

      # - name: Handle Apply Failure
      #   if: steps.apply.outputs.apply_failed == 'true' && steps.check_existing_resource.outputs.resource_exists == 'true'
      #   run: echo "Resource already exists hence exiting"

      # - name: Handle Apply Success
      #   if: steps.apply.outputs.apply_failed == 'false'
      #   run: echo "Apply successful"

        

   
      


    
